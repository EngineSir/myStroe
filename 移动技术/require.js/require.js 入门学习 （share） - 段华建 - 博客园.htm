<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>require.js 入门学习  （share） - 段华建 - 博客园</title>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common.css?id=20130901"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/kubrick/style.css?id=20130901"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common2.css"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/css/shStyle.css"/>
<link type="text/css" rel="stylesheet" href="http://www.cnblogs.com/duanhuajian/customcss.aspx?id=125804"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/duanhuajian/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/duanhuajian/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/duanhuajian/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">
var currentBlogApp = 'duanhuajian';
</script>
<script src="http://common.cnblogs.com/blog/script/common.js?id=20130901" type="text/javascript"></script> 
<script src="http://common.cnblogs.com/script/json2.js" type="text/javascript"></script>
<script type="text/javascript" src="http://common.cnblogs.com/script/syntaxHighlighter.js"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<!--Clicki统计-->
<script type='text/javascript'>
(function() {
    var c = document.createElement('script'); 
    c.type = 'text/javascript';
    c.async = true;
    c.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.clicki.cn/boot/49448';
    var h = document.getElementsByTagName('script')[0];
    h.parentNode.insertBefore(c, h);
})();
</script>

<!--Clicki 插件
    <div id="clicki_widget_6037" title=""></div>
-->
<!--PageBeginHtml Block End-->

<div id="header">
    
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/duanhuajian/">Hello World</a></h1>
<p id="tagline">关注互联网，关注前端开发；分享学习资源，分享学习体验...</p>
</div>
<div id="wrapper">
<div id="main">
    
	
	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="http://www.cnblogs.com/duanhuajian/archive/2013/01/04/2844151.html">require.js 入门学习  （share）</a>
		</h2>
		<div class="postText"><div id="cnblogs_post_body"><p>　　<strong>最近的项目用到了require.js ，搜集一些资源留个备份，顺便分享给大家。</strong></p>
<p>　　以下内容转自<strong>阮一峰</strong>老师的网络日志：<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></p>
<p>　　更多学习资源：</p>
<p>　　　　require.js官网：<a href="http://requirejs.org/docs/download.html">http://requirejs.org/docs/download.html</a></p>
<p>　　　　一篇不错的文章：<a href="http://www.csdn.net/article/2012-09-27/2810404">http://www.csdn.net/article/2012-09-27/2810404</a></p>
<p><strong>一、为什么要用require.js？</strong></p>
<p>最早的时候，所有Javascript代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。</p>
<blockquote>
<p>　　&lt;script src="1.js"&gt;&lt;/script&gt;<br />　　&lt;script src="2.js"&gt;&lt;/script&gt;<br />　　&lt;script src="3.js"&gt;&lt;/script&gt;<br />　　&lt;script src="4.js"&gt;&lt;/script&gt;<br />　　&lt;script src="5.js"&gt;&lt;/script&gt;<br />　　&lt;script src="6.js"&gt;&lt;/script&gt;</p>




</blockquote>
<p>这段代码依次加载多个js文件。</p>
<p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>require.js的诞生，就是为了解决这两个问题：</p>
<blockquote>
<p>　　<img src="http://image.beekka.com/blog/201211/bg2012110701.png" alt="" /></p>
<p>　　（1）实现js文件的异步加载，避免网页失去响应；</p>
<p>　　（2）管理模块之间的依赖性，便于代码的编写和维护。</p>




</blockquote>
<p><strong>二、require.js的加载</strong></p>
<p>使用require.js的第一步，是先去官方网站<a href="http://requirejs.org/docs/download.html" target="_blank">下载</a>最新版本。</p>
<p>下载后，假定把它放在js子目录下面，就可以加载了。</p>
<blockquote>
<p>　　&lt;script src="js/require.js"&gt;&lt;/script&gt;</p>




</blockquote>
<p>有人可能会想到，加载这个文件，也可能造成网页失去响应。解决办法有两个，一个是把它放在网页底部加载，另一个是写成下面这样：</p>
<blockquote>
<p>　　&lt;script src="js/require.js"&nbsp;<strong>defer async="true"</strong>&nbsp;&gt;&lt;/script&gt;</p>




</blockquote>
<p>async属性表明这个文件需要异步加载，避免网页失去响应。IE不支持这个属性，只支持defer，所以把defer也写上。</p>
<p>加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：</p>
<blockquote>
<p>　　&lt;script src="js/require.js"&nbsp;<strong>data-main="js/main"</strong>&gt;&lt;/script&gt;</p>




</blockquote>
<p>data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。</p>
<p><strong>三、主模块的写法</strong></p>
<p>上一节的main.js，我把它称为"主模块"，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。</p>
<p>下面就来看，怎么写main.js。</p>
<p>如果我们的代码不依赖任何其他模块，那么可以直接写入javascript代码。</p>
<blockquote>
<p>　　// main.js</p>
<p>　　alert("加载成功！");</p>




</blockquote>
<p>但这样的话，就没必要使用require.js了。真正常见的情况是，主模块依赖于其他模块，这时就要使用AMD规范定义的的require()函数。</p>
<blockquote>
<p>　　// main.js</p>
<p>　　require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){</p>
<p>　　　　// some code here</p>
<p>　　});</p>




</blockquote>
<p>require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是['moduleA', 'moduleB', 'moduleC']，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</p>
<p>require()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p>
<p>下面，我们看一个实际的例子。</p>
<p>假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：</p>
<blockquote>
<p>　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){</p>
<p>　　　　// some code here</p>
<p>　　});</p>




</blockquote>
<p>require.js会先加载jQuery、underscore和backbone，然后再运行回调函数。主模块的代码就写在回调函数中。</p>
<p><strong>四、模块的加载</strong></p>
<p>上一节最后的示例中，主模块的依赖模块是['jquery', 'underscore', 'backbone']。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。</p>
<p>使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。</p>
<blockquote>
<p>　　require.config({</p>
<p>　　　　paths: {</p>
<p>　　　　　　"jquery": "jquery.min",<br />　　　　　　"underscore": "underscore.min",<br />　　　　　　"backbone": "backbone.min"</p>
<p>　　　　}</p>
<p>　　});</p>




</blockquote>
<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。</p>
<blockquote>
<p>　　require.config({</p>
<p>　　　　paths: {</p>
<p>　　　　　　"jquery": "<strong>lib/</strong>jquery.min",<br />　　　　　　"underscore": "<strong>lib/</strong>underscore.min",<br />　　　　　　"backbone": "<strong>lib/</strong>backbone.min"</p>
<p>　　　　}</p>
<p>　　});</p>




</blockquote>
<p>另一种则是直接改变基目录（baseUrl）。</p>
<blockquote>
<p>　　require.config({</p>
<p>　　　　<strong>baseUrl: "js/lib",</strong></p>
<p>　　　　paths: {</p>
<p>　　　　　　"jquery": "jquery.min",<br />　　　　　　"underscore": "underscore.min",<br />　　　　　　"backbone": "backbone.min"</p>
<p>　　　　}</p>
<p>　　});</p>




</blockquote>
<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：</p>
<blockquote>
<p>　　require.config({</p>
<p>　　　　paths: {</p>
<p>　　　　　　"jquery": "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"</p>
<p>　　　　}</p>
<p>　　});</p>




</blockquote>
<p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p>
<p><strong>五、AMD模块的写法</strong></p>
<p>require.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。</p>
<p>具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p>
<p>假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：</p>
<blockquote>
<p>　　// math.js</p>
<p>　　define(function (){</p>
<p>　　　　var add = function (x,y){</p>
<p>　　　　　　return x+y;</p>
<p>　　　　};</p>
<p>　　　　return {</p>
<p>　　　　　　add: add<br />　　　　};</p>
<p>　　});</p>




</blockquote>
<p>加载方法如下：</p>
<blockquote>
<p>　　// main.js</p>
<p>　　require(['math'], function (math){</p>
<p>　　　　alert(math.add(1,1));</p>
<p>　　});</p>




</blockquote>
<p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>
<blockquote>
<p>　　define(['myLib'], function(myLib){</p>
<p>　　　　function foo(){</p>
<p>　　　　　　myLib.doSomething();</p>
<p>　　　　}</p>
<p>　　　　return {</p>
<p>　　　　　　foo : foo</p>
<p>　　　　};</p>
<p>　　});</p>




</blockquote>
<p>当require()函数加载上面这个模块的时候，就会先加载myLib.js文件。</p>
<p><strong>六、加载非规范的模块</strong></p>
<p>理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？</p>
<p>回答是可以的。</p>
<p>这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。</p>
<p>举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。</p>
<blockquote>
<p>　　require.config({</p>
<p>　　　　shim: {<br /><br />　　　　　　'underscore':{<br />　　　　　　　　exports: '_'<br />　　　　　　},</p>
<p>　　　　　　'backbone': {<br />　　　　　　　　deps: ['underscore', 'jquery'],<br />　　　　　　　　exports: 'Backbone'<br />　　　　　　}</p>
<p>　　　　}</p>
<p>　　});</p>




</blockquote>
<p>require.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。</p>
<p>比如，jQuery的插件可以这样定义：</p>
<blockquote>
<p>　　shim: {</p>
<p>　　　　'jquery.scroll': {</p>
<p>　　　　　　deps: ['jquery'],</p>
<p>　　　　　　exports: 'jQuery.fn.scroll'</p>
<p>　　　　}</p>
<p>　　}</p>




</blockquote>
<p><strong>七、require.js插件</strong></p>
<p>require.js还提供一系列<a href="https://github.com/jrburke/requirejs/wiki/Plugins" target="_blank">插件</a>，实现一些特定的功能。</p>
<p>domready插件，可以让回调函数在页面DOM结构加载完成后再运行。</p>
<blockquote>
<p>　　require(['domready!'], function (doc){</p>
<p>　　　　// called once the DOM is ready</p>
<p>　　});</p>




</blockquote>
<p>text和image插件，则是允许require.js加载文本和图片文件。</p>
<blockquote>
<p>　　define([</p>
<p>　　　　'text!review.txt',</p>
<p>　　　　'image!cat.jpg'</p>
<p>　　　　],<br /><br />　　　　function(review,cat){</p>
<p>　　　　　　console.log(review);</p>
<p>　　　　　　document.body.appendChild(cat);</p>
<p>　　　　}</p>
<p>　　);</p>




</blockquote>
<p>类似的插件还有json和mdown，用于加载json文件和markdown文件。</p></div><div id="MySignature"></div>
<script type="text/javascript">
var isLogined = false;
var cb_blogId = 125804;
var cb_entryId = 2844151;
var cb_blogApp = currentBlogApp;
var cb_blogUserGuid = "7f2a463b-2fe2-e111-aa3f-842b2b196315";
var cb_entryCreatedDate = '2013/1/4 14:32:00';
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
</script>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>
<script type="text/javascript">
    //SyntaxHighlighter.config.strings.expandSource = '<span><img src="http://static.cnblogs.com/images/expand-code.gif" alt="" class="expand-code-icon"/>View Code</span>';
    $(function () {  
        loadViewCount(cb_entryId);
        fixPostBodyFormat();
        loadAdUnderPost();
        loadBlogSignature();
        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);        
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);        
    });
</script></div>
		<p class="postfoot">
			posted on <span id="post-date">2013-01-04 14:32</span> <a href='http://www.cnblogs.com/duanhuajian/'>段华建</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://www.cnblogs.com/duanhuajian/admin/EditPosts.aspx?postid=2844151" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2844151);return false;">收藏</a>
		</p>
	</div>
	<script src="http://counter.cnblogs.com/blog/post/2844151" type="text/javascript"></script>
	
	<div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>

<script type="text/javascript">
    if (typeof commentManager === 'undefined') {
        commentManager = new blogCommentManager();
    }
    commentManager.loadCommentForm();   
</script>

<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<div id="HistoryToday" class="c_ad_block"></div>
</div>




    
</div>
<div id="rightmenu">
    
        
<h3>公告</h3>
	<div id="blog-news"></div>

        
<h3>导航</h3>
<ul>
			<li><a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</a></li>
			<li><a id="MyLinks1_MyHomeLink" href="http://www.cnblogs.com/duanhuajian/">首页</a></li>
			<li></li>
			<li><a id="MyLinks1_ContactLink" accesskey="9" rel="nofollow" href="http://space.cnblogs.com/msg/send/%e6%ae%b5%e5%8d%8e%e5%bb%ba">联系</a></li>
			<li><a id="MyLinks1_Syndication" href="http://www.cnblogs.com/duanhuajian/rss">订阅</a><a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/duanhuajian/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>
			<li><a id="MyLinks1_Admin" rel="nofollow" href="http://www.cnblogs.com/duanhuajian/admin/EditPosts.aspx">管理</a></li>
</ul>
        <div id="blog-calendar-block" style="display:none"><div id="blog-calendar"></div>
</div>
        
<h3>统计</h3>
	<ul>
		<li>随笔 - 87
		<li>文章 - 0
		<li>评论 - 44
		<li>引用 - 0
	</li>
</ul>
        <div id="blog-sidecolumn"></div>
    
</div>
</div>
<div class="clear"></div>

<div id="footer">
	Powered by: 
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>	Copyright &copy; 段华建
</div>

<!--PageEndHtml Block Begin-->
<!-- JiaThis Button BEGIN -->
<script type="text/javascript" src="http://v3.jiathis.com/code/jiathis_r.js?uid=1373607583597601&move=0" charset="utf-8"></script>
<!-- JiaThis Button END -->


<!-- JiaThis Button BEGIN
<div class="jiathis_share_slide jiathis_share_24x24" id="jiathis_share_slide">
<div class="jiathis_share_slide_top" id="jiathis_share_title"></div>
<div class="jiathis_share_slide_inner">
<div class="jiathis_style_24x24">
<a class="jiathis_button_qzone"></a>
<a class="jiathis_button_tsina"></a>
<a class="jiathis_button_tqq"></a>
<a class="jiathis_button_renren"></a>
<a class="jiathis_button_kaixin001"></a>
<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
<script type="text/javascript">
var jiathis_config = {
	slide:{
		divid:'wrapper',//设定分享按钮的位置在哪个DIV的边缘，一般是主体内容的外层DIV框架ID,
		pos:'left',
		gt:'true'
	}
};
</script>
<script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=1362541446590559" charset="utf-8"></script>	
<script type="text/javascript" src="http://v3.jiathis.com/code/jiathis_slide.js" charset="utf-8"></script>
</div></div></div>
<!-- JiaThis Button END -->
<!--PageEndHtml Block End-->
<script type="text/javascript" src="http://common.cnblogs.com/script/google-analytics.js"></script>
</body>
</html>
